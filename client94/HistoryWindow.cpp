 /*
 *
 * Copyright (c) 2002: The Trustees of Columbia University
 *    in the City of New York.  All Rights Reserved.
 *
 *
 */
#define SYSDEF_PATH
#include "cssysdef.h"
#include "cssys/sysdriv.h"
#include "csws/csws.h"
#include "csver.h"
#include "ivideo/fontserv.h"
//#include "icfgnew.h"
#include "ChimeWindow.h"
#include "ChimeSystemDriver.h"

class ChimeSystemDriver;
extern ChimeSystemDriver *Sys;

// Scroll bar class default palette
HistoryWindow::~HistoryWindow() {}


HistoryWindow::HistoryWindow(csComponent *iParent)
  : AlwaysVisibleWindow(iParent, "-- History --", CSWS_TITLEBAR | CSWS_BUTCLOSE |
    CSWS_BUTMAXIMIZE)
  {

  InitCount();

  SetRect (0, 15, app->bound.Width() / 4, app->bound.Height() / 3);

  int px = 15, py = 20;
  int labelw = 150;

  //////////create the dialog///////////////
  csDialog *d = new csDialog(this);
  this->SetDragStyle (this->GetDragStyle () & ~CS_DRAG_SIZEABLE);
  
  //////////create the list box/////////////
  lb = new csListBox (d, CSLBS_HSCROLL | CSLBS_VSCROLL, cslfsThinRect);
  lb->SetRect (bound.Width() / 10, bound.Height() / 5 - TitlebarHeight, bound.Width() / 10 * 9, bound.Height() / 5 * 4);

  //setup the "Go There"
  csButton *GoBut = new csButton(d, GO_THERE_PRESSED);
  GoBut->SetText("Go There");
  GoBut->SetSuggestedSize(.5 * (bound.Width() / 10 * 9 -  bound.Width() / 10), .5 * bound.Height() / 11);
  GoBut->SetPos(bound.Width() / 10, bound.Height() / 6 * 5);
  
  last_item = NULL;
  AddItem("http://www.yahoo.com/");

}

//Add an item to the History Box
bool HistoryWindow::AddItem(char *item) {
	if (last_item) {
		lb -> SetFocused(last_item);
	}

	last_item = new csListBoxItem (lb, item, ItemCount());
	AddItem();
	return true;
}


//Handle and Event generated by the History Window
bool HistoryWindow::HandleEvent (iEvent &Event)
{

  if (AlwaysVisibleWindow::HandleEvent (Event))
    return true;


  switch (Event.Type)
  {

    case csevCommand:

      switch (Event.Command.Code)
      {

		//if the user has selected a room to go to
		case cscmdListBoxItemSelected:
		case cscmdListBoxItemClicked:
		{
			csListBoxItem *srcItem = (csListBoxItem *) Event.Command.Info;
			strcpy(selected, srcItem->GetText());
		}
		return true;


	    //Go There button was pressed
        case GO_THERE_PRESSED:
			if (selected) {
				int temp;
				sscanf(selected, "%d. %s", &temp, selected);
				Sys->TransportToRoom(selected);
			}
		return true;


		 //Cancel Button has been pressed
		case 66801:
		  Close();
		  return true;
	  }

      break;
  }

  return false;
}
