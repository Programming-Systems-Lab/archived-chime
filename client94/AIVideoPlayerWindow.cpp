// AIVideoPlayerWindow.cpp: implementation of the AIVideoPlayerWindow class.
//
//////////////////////////////////////////////////////////////////////

#define SYSDEF_PATH
#include "cssysdef.h"
#include "cssys/sysdriv.h"
#include "csws/csws.h"
#include "csver.h"
#include "ivideo/fontserv.h"
//#include "icfgnew.h"
#include "ChimeWindow.h"
#include "ChimeApp.h"
#include "AISyncController.h"
#include "ChimeSystemDriver.h"
#include "AICacheController.h"
#include "AiDownloader.h"
#include "AIVideoPlayerWindow.h"
#include "AI2TVConstants.h"
#include "AICommController.h"
#include "AITimeController.h"

class ChimeSystemDriver;
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
extern ChimeSystemDriver *Sys;

AIVideoPlayerWindow::AIVideoPlayerWindow(csComponent *iParent)
: AlwaysVisibleWindow(iParent, "-- AI2TV Controls --", CSWS_TITLEBAR | CSWS_BUTCLOSE |
    CSWS_BUTMAXIMIZE)
{
   SetRect (Sys->GetApp()->bound.Width() / 4, 
			Sys->GetApp()->bound.Height() * 0.86, 
			Sys->GetApp()->bound.Width() / 2.25 + Sys->GetApp()->bound.Width() / 4, 
			Sys->GetApp()->bound.Height());
 
  int px = 15, py = 20;
  int labelw = 150;
  int delUp = 25;

  //////////create the dialog///////////////
  d = new csDialog(this);
  this->SetDragStyle (this->GetDragStyle () & ~CS_DRAG_SIZEABLE);
  
   //setup the "play"
  PlayBut = new csButton(d, AI2TV_PLAY_PRESSED);
  PlayBut->SetText("Play");
  PlayBut->SetSuggestedSize((bound.Width() /4), .3 * (bound.Height() /11));
  PlayBut->SetPos(0, bound.Height() / 4 - delUp);

     //setup the "next"
  NextBut = new csButton(d, AI2TV_NEXT_PRESSED);
  NextBut->SetText("Next Frame");
  NextBut->SetSuggestedSize((bound.Width() /4), .3 * (bound.Height() /11));
  NextBut->SetPos(bound.Width()/2, bound.Height() / 4 - delUp);

     //setup the "network"
  NetBut = new csButton(d, AI2TV_NET_PRESSED);
  NetBut->SetText("Network");
  NetBut->SetSuggestedSize((bound.Width() /4), .3 * (bound.Height() /11));
  NetBut->SetPos(0, bound.Height() / 2 - delUp);

     //setup the "time"
  TimeBut = new csButton(d, AI2TV_TIME_PRESSED);
  TimeBut->SetText("Time");
  TimeBut->SetSuggestedSize((bound.Width() /4), .3 * (bound.Height() /11));
  TimeBut->SetPos(bound.Width()/2, bound.Height() / 2 - delUp);

  
   //setup the "play"
  PauseBut = new csButton(d, AI2TV_PAUSE_PRESSED);
  PauseBut->SetText("Pause");
  PauseBut->SetSuggestedSize((bound.Width() /4), .3 * (bound.Height() /11));
  PauseBut->SetPos(0, 3*bound.Height() / 4 - delUp);

}

AIVideoPlayerWindow::~AIVideoPlayerWindow()
{

}

void AIVideoPlayerWindow::UpdateDialog()
{
	this->Invalidate(true, NULL);
	//d->Invalidate();
}


//Handle and Event generated by the History Window
bool AIVideoPlayerWindow::HandleEvent (iEvent &Event)
{

  if (AlwaysVisibleWindow::HandleEvent (Event))
    return true;


  switch (Event.Type)
  {
    case csevCommand:
		char* ev_msg = new char[300];
	
      switch (Event.Command.Code)
      {


	    //Go There button was pressed
        case AI2TV_PLAY_PRESSED:
				///Sys->myVideoPlayer->TimeController->stopped=false;
				Sys->myVideoPlayer->Comm->broadcast(AI2TV_PLAY_PRESSED);
				//Sys->GetApp()->historyWindow->AddItem("Playing");
				//	PlayBut->SetText("PAUSE");
				//	PlayBut->SetCommandCode(AI2TV_PAUSE_PRESSED);
				//	PlayBut->SetPressed(true);
				SetText("AI2TV Video (Play Req'd)");
				
		return true;
		  //Go There button was pressed
        case AI2TV_PAUSE_PRESSED:
				//Sys->myVideoPlayer->TimeController->stopped=true;
				Sys->myVideoPlayer->Comm->broadcast(AI2TV_PAUSE_PRESSED);
				//Sys->GetApp()->historyWindow->AddItem("Paused");
				//	PlayBut->SetText("PLAY");
				//	PlayBut->SetCommandCode(AI2TV_PLAY_PRESSED);
				//	PlayBut->SetPressed(false);
				SetText("AI2TV Video (Pause Req'd)");
			
		return true;
		
		case AI2TV_NEXT_PRESSED:
				Sys->myVideoPlayer->Comm->broadcast(AI2TV_NEXT_PRESSED);
				Sys->myVideoPlayer->debug(1,"NEXT FRAME");
				Sys->myVideoPlayer->playThread();
				
		return true;
		case AI2TV_NET_PRESSED:
			Sys->myVideoPlayer->CacheController->checkNetwork();
		return true;

		case AI2TV_TIME_PRESSED:
			sprintf(ev_msg,"T=%2d:%2d",Sys->myVideoPlayer->TimeController->current_time/60000,(Sys->myVideoPlayer->TimeController->current_time/1000)%60);
			TimeBut->SetText(ev_msg);
			if (Sys->myVideoPlayer->TimeController->current_time %2 == 1) Sys->myVideoPlayer->CacheController->WorseCLevel();
			else Sys->myVideoPlayer->CacheController->BetterCLevel();
			return true;
	  }

      break;
  }

  return false;
}
